@using System.Security.Claims
@using ASP.Mappers

@{
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "";
    var roleName = User.FindFirstValue(ClaimTypes.Role) ?? "";

    var displayName = await userService.GetDisplayNameAsync(userId);
    var user = await userManager.FindByIdAsync(userId);
    var userAvatar = user?.ImageUrl ?? "/images/avatars/default-user.svg";
    
    // Get total count of notifications (inkl. dismissed)
    var totalCount = await notificationService.GetTotalNotificationCountAsync(userId, roleName);
    
    // Get notifications that are going to be shown (not dismissed)
    var notificationResult = await notificationService.GetNotificationsAsync(userId, roleName);
    var notifications = (notificationResult.Result ?? []).OrderByDescending(x => x.CreatedAt).ToList();
    var unreadCount = notifications.Count(n => !n.IsRead);
}

<input type="checkbox" id="hamburger-toggle" class="hamburger-checkbox" />
<label for="hamburger-toggle" class="hamburger-icon">
    <span></span>
    <span></span>
</label>

<div class="searchbox">
    <i class="fa-duotone fa-solid fa-magnifying-glass"></i>
    <input type="text" placeholder="Search anything..." />
</div>

<div class="header-actions">
    @* Notification Dropdown *@
    <div class="dropdown-wrapper window" id="notification-dropdown">
        <button id="notification-dropdown-button" class="dropdown-toggle notification-btn" data-window="dropdown"
            data-target="notification-dropdown" aria-label="Notification" aria-haspopup="true" aria-expanded="false">
            <i class="fa-duotone fa-solid fa-bell"></i>
            @if (unreadCount > 0)
            {
                <div class="notification-counter">@unreadCount</div>
                <span class="notification-indicator"></span>
            }
        </button>

        @{
            var notificationsModel = new NotificationDropdownViewModel
            {
                TotalCount = totalCount,
                UnreadCount = unreadCount,
                Notifications = notifications.Select(NotificationViewModelMapper.ToViewModel).ToList()
            };
        }
        <partial name="Partials/Components/Header/_NotificationDropdown" model="@notificationsModel" />
    </div>

    @* Profile Dropdown *@
    <div class="dropdown-wrapper" id="profile-dropdown">
        <button id="profile-dropdown-button" class="dropdown-toggle user-profile-btn" data-window="dropdown"
            data-target="profile-dropdown" aria-label="User Profile" aria-haspopup="true" aria-expanded="false">
            <img src="@userAvatar" alt="User avatar" />
        </button>

        @{
            var profileModel = new ProfileDropdownViewModel
            {
                UserId = userId,
                DisplayName = displayName,
                AvatarUrl = userAvatar,
                IsDarkMode = false,
                LogoutUrl = Url.Action("Logout", "Auth") ?? "#"
            };
        }
        <partial name="Partials/Components/Header/_ProfileDropdown" model="@profileModel" />
    </div>
</div>
